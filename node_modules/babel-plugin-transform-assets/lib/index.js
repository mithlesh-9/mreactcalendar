"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = transformAssets;

var _path = require("path");

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var defaultOptions = {
  name: '[name].[ext]?[sha512:hash:base64:7]'
};

function transformAssets(_ref) {
  var t = _ref.types;

  function resolveModulePath(filename) {
    var dir = (0, _path.dirname)(filename);

    if ((0, _path.isAbsolute)(dir)) {
      return dir;
    }

    if (process.env.PWD) {
      return (0, _path.resolve)(process.env.PWD, dir);
    }

    return (0, _path.resolve)(dir);
  }

  return {
    visitor: {
      CallExpression: function CallExpression(path, _ref2) {
        var file = _ref2.file,
            opts = _ref2.opts;

        var currentConfig = _objectSpread({}, defaultOptions, opts);

        if (typeof currentConfig.name !== 'string') {
          return;
        }

        currentConfig.extensions = currentConfig.extensions || [];
        /* eslint-disable global-require */

        require('asset-require-hook')(currentConfig);
        /* eslint-enable */


        var _path$node = path.node,
            calleeName = _path$node.callee.name,
            args = _path$node.arguments;

        if (calleeName !== 'require' || !args.length || !t.isStringLiteral(args[0])) {
          return;
        }

        if (currentConfig.extensions.find(function (ext) {
          return args[0].value.endsWith(ext);
        })) {
          var _args = _slicedToArray(args, 1),
              filePath = _args[0].value;

          if (!t.isExpressionStatement(path.parent)) {
            var from = resolveModulePath(file.opts.filename);
            /* eslint-disable global-require, import/no-dynamic-require, new-cap */

            var p = require((0, _path.resolve)(from, filePath));

            path.replaceWith(t.StringLiteral(p));
            /* eslint-enable */
          } else {
            path.remove();
          }
        }
      }
    }
  };
}